<%= tag.div class: "content-object-item draggable_#{sanitize_to_id(key)} accordion-item#{ ' is-active' if (!local_assigns[:hide_embedded] && !definition.dig('ui', 'edit', 'hide_onload')) }",
  id: "#{sanitize_to_id(key)}_item_#{index}",
  data: {
    index: index,
    accordion_item: true
  } do %>

  <%
    readonly = !attribute_editable?(key, definition, local_assigns[:options], content)
    new_key = embedded_key_prefix(key, index)
    time_key = "#{new_key}[time]"
    time_objects = local_assigns[:object]
    time_definition = opening_time_time_definition
  %>

  <span class="embedded-header">
    <% unless true # unless readonly -> disabled, schedules cant be ordered %>
      <span class="draggable-handle"><i class="fa fa-bars" aria-hidden="true"></i></span>
      <span class="swap-prev swap-button disabled"
        data-dc-tooltip="<%= t('embedded.move_up', locale: active_ui_locale) %>"><i
          class="fa fa-arrow-up" aria-hidden="true"></i></span>
      <span class="swap-next swap-button disabled"
        data-dc-tooltip="<%= t('embedded.move_down', locale: active_ui_locale) %>"><i
          class="fa fa-arrow-down" aria-hidden="true"></i></span>
    <% end %>
  </span>

  <a href="#" class="accordion-title">
    <span class="title">
      <span class="icon"><i class="fa fa-calendar" aria-hidden="true"></i></span>
      <span class="embedded-label"><%= translated_attribute_label(key, definition, content, options) %></span>
      <%= render 'data_cycle_core/contents/helper_text', key: key, definition: definition, content: contextual_content(local_assigns) %>
    </span>
  </a>

  <% unless readonly %>
    <%= button_tag tag.i(class: 'fa fa-times'), type: :button, class: 'button removeContentObject alert' %>
  <% end %>

  <% value = time_objects&.first.to_h %>

  <div class="opening-time-editor embedded-properties accordion-content" data-tab-content>
    <div class="opening-time-range">
      <div class="form-element valid_from">
        <%= label_tag "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id("#{new_key}[valid_from]")}" do %>
          <%= content_tag(:i, nil, class: 'fa fa-ban', aria_hidden: true) if readonly %>
          <%= t('opening_time.valid_from', locale: active_ui_locale) %>
        <% end %>
        <% if readonly %>
          <%= text_field_tag "#{new_key}[valid_from]",
            l(value.dig(:start_time, :time)&.in_time_zone&.to_date, format: :edit, locale: active_ui_locale),
            class: 'read-only date',
            id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id("#{new_key}[valid_from]")}", readonly: true %>
        <% else %>
          <%= date_field_tag "#{new_key}[valid_from]", value.dig(:start_time, :time)&.in_time_zone&.to_date || Date.current, id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id("#{new_key}[valid_from]")}", data: { type: 'datepicker' } %>
        <% end %>
      </div>

      <div class="form-element valid_until">
        <%= label_tag "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id("#{new_key}[valid_until]")}" do %>
          <%= content_tag(:i, nil, class: 'fa fa-ban', aria_hidden: true) if readonly %>
          <%= t('opening_time.valid_until', locale: active_ui_locale) %>
        <% end %>

        <% if readonly %>
          <%= text_field_tag "#{new_key}[valid_until]",
            l(value.dig(:rrules, 0, :until)&.to_date, format: :edit, locale: active_ui_locale),
            class: 'read-only date',
            id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id("#{new_key}[valid_until]")}", readonly: true %>
        <% else %>
          <%= date_field_tag "#{new_key}[valid_until]", value.dig(:rrules, 0, :until)&.to_date, id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id("#{new_key}[valid_until]")}", data: { type: 'datepicker' } %>
        <% end %>
      </div>

      <div class="weekday form-element">
        <%= label_tag sanitize_to_id("#{new_key}[rrules][][validations][day]") do %>
          <%= content_tag(:i, nil, class: 'fa fa-ban', aria_hidden: true) if readonly %>
          <%= t('opening_time.weekday', locale: active_ui_locale) %>
        <% end %>
        <% [*(1..6), 0].each do |v| %>
          <span class="weekday-checkbox">
            <%= hidden_field_tag "#{new_key}[rrules][][validations][day][]", v if readonly && value&.dig(:rrules, 0, :validations, :day)&.include?(v) %>
            <%= check_box_tag "#{new_key}[rrules][][validations][day][]", v, value&.dig(:rrules, 0, :validations, :day)&.include?(v), id: sanitize_to_id("#{new_key}[rrules][][validations][day][#{v}]"), disabled: readonly %>
            <%= label_tag sanitize_to_id("#{new_key}[rrules][][validations][day][#{v}]"), t('date.abbr_day_names', locale: active_ui_locale)[v] %>
          </span>
        <% end %>

        <span class="weekday-checkbox holiday">
          <%= hidden_field_tag "#{new_key}[holiday]", value&.dig(:holidays) || 'ignore' if readonly %>
          <%= radio_button_tag "#{new_key}[holiday]", 'true', value&.dig(:holidays) == true, id: sanitize_to_id("#{new_key}[holiday][true]"), class: 'dc-multi-value-button true_option', disabled: readonly %>
          <%= radio_button_tag "#{new_key}[holiday]", 'false', value&.dig(:holidays) == false, id: sanitize_to_id("#{new_key}[holiday][false]"), class: 'dc-multi-value-button false_option', disabled: readonly %>
          <%= radio_button_tag "#{new_key}[holiday]", 'ignore', value&.dig(:holidays).nil?, id: sanitize_to_id("#{new_key}[holiday][ignore]"), class: 'dc-multi-value-button ignore_option', disabled: readonly %>
          <%= label_tag sanitize_to_id("#{new_key}[holiday]"), t('opening_time.holiday', locale: active_ui_locale), class: 'dc-multi-value-label' %>
        </span>
      </div>
    </div>

    <%= render 'data_cycle_core/contents/editors/attribute', key: time_key, definition: {}, value: nil, options: options.merge({ 'class' => 'object embedded_object' }), content: content do %>

      <%= embedded_editor_header(**local_assigns.merge({ key: time_key, definition: time_definition })) %>

      <div class="embedded-object" id="<%= "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id(time_key)}" %>"
        data-locale="<%= I18n.locale.to_s %>"
        data-key="<%= time_key %>"
        data-label="<%= translated_attribute_label(time_key, time_definition, content, options) %>"
        data-definition="<%= time_definition.to_json %>"
        data-options="<%= options.to_json %>"
        data-total="<%= time_objects.presence&.size %>"
        data-ids="<%= time_objects.presence&.pluck(:id) %>"
        data-content-type="<%= content.class.table_name %>"
        data-template-name="<%= content.thing_template.persisted? ? content.template_name : nil %>"
        data-template="<%= to_query_params(thing_template: content.thing_template).to_json %>"
        data-url="<%= thing_path(content) %>"
        data-write="<%= attribute_editable?(time_key, time_definition, options, content) %>"
        data-accordion
        data-allow-all-closed="true"
        data-multi-expand="true">

        <% if time_objects.present? %>
          <% time_objects.each_with_index do |object, index| %>
            <%= render_embedded_object_partial(key: time_key,
              definition: time_definition,
              parameters: {
                object: object,
                index: index,
                options: options,
                new_content: local_assigns[:new_content].to_s == 'true',
                attribute_locale: local_assigns[:attribute_locale],
                duplicated_content: local_assigns[:duplicated_content].to_s == 'true',
                locale: I18n.locale.to_s
              },
              content: content
            ) %>
          <% end %>
        <% else %>
          <%= hidden_field_tag time_key + '[]', nil, id: "#{local_assigns.dig(:options, :prefix)}#{sanitize_to_id(time_key)}_default" %>
        <% end %>
      </div>
    <% end %>
  </div>
<% end %>
