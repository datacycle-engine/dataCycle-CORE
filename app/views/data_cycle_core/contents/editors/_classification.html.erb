<%= render 'data_cycle_core/contents/editors/attribute', key: key, definition: definition, value: value, options: options, content: content, parent: local_assigns[:parent] do %>

  <%= attribute_edit_label_tag(**local_assigns) %>

  <div class="v-select">
    <% classification_items = classification_alias_filter_items(definition['tree_label'], { internal_name: :asc }) %>
    <% single_select = definition.dig('ui', 'edit', 'options', 'multiple') == false || definition.dig('validations', 'max') == 1 %>
    <%= hidden_field_tag "#{key}[]", nil %>

    <% if (definition.dig('ui', 'edit', 'async').to_s != 'false' && classification_items.size > DataCycleCore.max_asynch_classification_items) %>
      <%= select_tag(
            "#{key}[]",
            async_classification_select_options(value, DataCycleCore::Classification),
            classification_select_config(key, definition, options, content, { class: 'async-select' })
          ) %>
    <% else %>
      <%= select_tag(
            "#{key}[]",
            simple_classification_select_options(value, classification_items, DataCycleCore::Classification),
            classification_select_config(key, definition, options, content)
          ) %>
    <% end %>

    <% value.presence&.each do |c| %>
      <%= hidden_field_tag "#{key}[]", c.id %>
    <% end unless attribute_editable?(key, definition, options, content) %>
  </div>
<% end if classification_tree_label_has_children?(definition['tree_label']) %>
