<% objects = value&.includes(:translations) %>
<% objects = Array(objects) + new_relations(options.dig(:item_diff), 'things').includes(:translations).to_a.concat if changes_by_mode(options.dig(:item_diff), '+').present? %>

<% if objects.present? %>
  <%= conditional_tag :div, !local_assigns[:no_wrapper], class: embedded_viewer_html_classes(**local_assigns), data: { accordion: true, allow_all_closed: true, multi_expand: true } do %>
    <%= attribute_viewer_label_tag(**local_assigns.merge(accordion_controls: true)) if !local_assigns[:no_wrapper] %>

    <% objects&.each_with_index do |object, index| %>
      <% changes_by_value_hash = changes_by_value(options.dig('item_diff'), diff_target_id(object)) %>
      <% merged_options = options.merge({
          item_diff: changes_by_value_hash,
          mode: changes_class(options.dig('item_diff'), diff_target_id(object))
        }).with_indifferent_access %>

      <%= render 'data_cycle_core/contents/viewers/attribute',
                 key: key,
                 definition: definition,
                 value: value,
                 options: merged_options.merge({
                   hide_label: true,
                   class: "accordion-item #{'is-active' unless definition.dig('ui', 'show', 'hide_onload')}"
                 }),
                 data_attributes: {
                   id: [object.id],
                   editor: 'embedded_object',
                   accordion_item: true,
                   translatable: !definition['translated'] || @content&.id != @split_source&.id
                 },
                 content: content,
                 parent: local_assigns[:parent] do %>

        <div class="accordion-title">
          <%= render 'data_cycle_core/shared/icon', icon_type: object.template_name.underscore_blanks, icon_class: object.class.name.demodulize.underscore_blanks %>
          <span class="title">
            <span class="embedded-type"><%= translated_attribute_label(key, definition, content, options) %></span>
            <%= tag.span(object.send(object.embedded_title_property_name), title: object.send(object.embedded_title_property_name), class: 'embedded-title') if object.embedded_title_property_name.present? && object.try(object.embedded_title_property_name).present? %>
          </span>

          <%= link_to tag.i(class: 'fa fa-pencil'), edit_thing_path(content, watch_list_id: @watch_list, locale: I18n.locale, hide_embedded: true, anchor: object.related_contents(embedded: true).ids.reverse.except(content.id).push(object.id).join('+')), class: 'edit-content-link', title: t('actions.edit', locale: active_ui_locale) if can?(:edit, content) %>
        </div>

        <div class="accordion-content remote-render" data-tab-content
             data-remote-path="data_cycle_core/contents/viewers/embedded/image_variant"
             data-remote-options="<%= to_query_params(local_assigns.merge({ object: object, index: index, locale: I18n.locale, options: merged_options, diff_target: changes_by_mode(changes_by_value_hash, '~').present? ? diff_target_by_id(**local_assigns.merge({ object: object })) : nil })).to_json %>">
        </div>
      <% end %>
    <% end %>

    <% if value.try(:total_pages)&.positive? && !value&.last_page? %>
      <span class="clear-both">
        <%= link_to t('common.load_all', locale: active_ui_locale),
                    load_more_linked_objects_thing_path(contextual_content(local_assigns)),
                    id: "load_more_#{content&.id}_#{sanitize_to_id(key)}",
                    class: 'load-more-linked-contents button small secondary',
                    data: {
                      disable_with: "<i class='fa fa-spinner fa-spin'></i> #{t('common.loading', locale: active_ui_locale)}",
                      key: key.attribute_name_from_key,
                      complete_key: key,
                      content_id: content&.id,
                      content_type: content&.class&.table_name,
                      definition: definition&.to_json,
                      options: options&.to_json,
                      page: local_assigns.fetch(:page, 1).to_i + 1,
                      load_more_action: :show,
                      locale: I18n.locale
                    } %>
      </span>
    <% end %>
  <% end %>
<% end %>
