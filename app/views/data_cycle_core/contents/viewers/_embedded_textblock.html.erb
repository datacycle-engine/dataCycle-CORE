<% objects = value&.includes(:translations).to_a || [] %>
<% objects = objects.concat(new_relations(options.dig(:item_diff), 'things').includes(:translations).to_a) if changes_by_mode(options.dig(:item_diff), '+').present? %>

<% objects&.each_with_index do |object, index| %>
  <% I18n.with_locale(object.first_available_locale) do %>
    <% validation_properties = ordered_validation_properties(validation: object.schema, scope: :show) %>
    <% validation_properties['text']['label'] = object.try(:name) if object.try(:name).present? %>
    <% changes_by_value_hash = changes_by_value(options.dig('item_diff'), diff_target_id(object)) %>
    <% merged_options = options.merge({
        item_diff: changes_by_value_hash,
        mode: changes_class(options.dig('item_diff'), diff_target_id(object)),
        class: "embedded"
      }).with_indifferent_access %>

    <%= render 'data_cycle_core/contents/viewers/attribute',
          key: key,
          definition: validation_properties['text'],
          value: object.try(:text),
          options: merged_options,
          content: content,
          parent: local_assigns[:parent],
          diff_target: changes_by_mode(changes_by_value_hash, '~').present? ? diff_target_by_id(**local_assigns.merge({ object: object })) : nil,
          data_attributes: {
            editor: 'embedded_object',
            id: [object.id],
            translatable: !definition['translated'] || @content&.id != @split_source&.id
          },
          data_label: 'Textblock' do %>
      <span class="detail-content"><%= object.try(:text).try(:html_safe) %></span>
    <% end %>
  <% end %>
<% end %>

<div class="clear-both">
  <%= link_to t('common.load_all', locale: active_ui_locale),
        load_more_linked_objects_thing_path(content),
        id: "load_more_#{content&.id}_#{sanitize_to_id(key)}",
        class: 'load-more-linked-contents button small secondary',
        data: {
          disable_with: "<i class='fa fa-spinner fa-spin'></i> #{t('common.loading', locale: active_ui_locale)}",
          key: key.attribute_name_from_key,
          complete_key: key,
          content_id: content&.id,
          content_type: content&.class&.table_name,
          definition: definition&.to_json,
          options: options&.to_json,
          page: local_assigns.fetch(:page, 1).to_i + 1,
          load_more_action: :show,
          locale: I18n.locale
        } if value.try(:total_pages)&.positive? && !value&.last_page? %>
</div>
