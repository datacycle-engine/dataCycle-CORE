<% I18n.with_locale(local_assigns[:locale]) do %>
  <% validation_properties = ordered_validation_properties(validation: object&.schema, scope: :show, exclude_keys: object.history? ? object.virtual_property_names : []) %>
  <% item_diff = object.diff(local_assigns[:diff_target]&.get_data_hash) if changes_by_mode(options.dig('item_diff'), '~').present? %>
  <% validation_properties&.each do |embedded_key, prop| %>
    <% next if prop&.dig('inverse_of') == key.attribute_name_from_key %>

    <% object_value = object.try(embedded_key.to_sym) %>
    <% object_value = object_value.presence&.page&.per(DataCycleCore.linked_objects_page_size) if object_value.is_a?(ActiveRecord::Relation) && !content.history? && ['linked', 'embedded'].include?(prop&.dig('type')) %>
    <%= render_attribute_viewer key: "#{key}[#{index}][#{embedded_key}]",
                                definition: prop,
                                value: object_value,
                                parameters: {
                                  options: object_viewer_history_options(**local_assigns.merge({ key: embedded_key, item_diff: item_diff })),
                                  parent: object,
                                  diff_target: local_assigns[:diff_target]
                                },
                                content: content %>
  <% end %>
<% end %>
