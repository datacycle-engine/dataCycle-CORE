<% objects = value.presence %>
<% objects = Array(objects) + new_relations(options.dig(:item_diff), 'things').to_a.concat if changes_by_mode(options.dig(:item_diff), '+').present? %>

<% objects.presence&.each_with_index do |object, index| %>

  <%= render 'data_cycle_core/contents/viewers/attribute',
      key: key,
      definition: definition,
      value: value,
      options: options.merge({
        hide_label: true
      }),
      data_attributes: {
        id: [object.id],
        editor: 'schedule'
      },
      content: content,
      parent: local_assigns[:parent] do %>

    <%= attribute_viewer_label_tag(**local_assigns) do %>
      <%= tag.span((local_assigns.fetch(:page, 1).to_i - 1) * DataCycleCore.linked_objects_page_size + index + 1) if value.try(:total_count)&.>(1) || value.try(:total_pages)&.>(1) %>
      <i>
        <%= object.try(:schedule_object)&.terminating? ? "(#{object.schedule_object.all_occurrences.size})" : "#{t('schedule.ongoing', locale: active_ui_locale)}" %>
        <span class="schedule-duration"> / <b><%= t('schedule.duration.root', locale: active_ui_locale) %>:</b> <%= object.duration&.positive? ? distance_of_time_in_words(Time.zone.now, Time.zone.now + object.duration, locale: active_ui_locale) : ' - ' %></span>
      </i>
      <%= render 'data_cycle_core/shared/validation_messages', content: content, key: key, value: Array.wrap(object.to_h) if definition.key?('validations') %>
    <% end %>

    <% next_occurrences = object.try(:schedule_object)&.next_occurrences(5) || [] %>
    <% previous_occurrence = object.try(:schedule_object)&.previous_occurrence(Time.zone.now) %>

    <span class="detail-content events-calender-view">
      <%= link_to t('schedule.prev', locale: active_ui_locale),
            load_more_schedule_path(object, direction: :previous, target: "load_prev_#{object&.id}_#{sanitize_to_id(key)}", from_time: Time.zone.now, class_name: object.class.name),
            type: 'button',
            class: 'button load-prev',
            id: "load_prev_#{object&.id}_#{sanitize_to_id(key)}",
            remote: true,
            data: {
              disable_with: "#{t('schedule.prev', locale: active_ui_locale)} <i class='fa fa-spinner fa-fw fa-spin'></i>"
            } if !object.try(:schedule_object)&.terminating? || previous_occurrence.present? %>

      <%= render partial: 'data_cycle_core/contents/viewers/schedule/date_leaf', collection: next_occurrences, as: :date, locals: { object: object } %>

      <%= link_to t('schedule.next', locale: active_ui_locale),
            load_more_schedule_path(object, direction: :next, target: "load_next_#{object&.id}_#{sanitize_to_id(key)}", from_time: next_occurrences.last, class_name: object.class.name),
            type: 'button',
            class: 'button load-next',
            id: "load_next_#{object&.id}_#{sanitize_to_id(key)}",
            remote: true,
            data: {
              disable_with: "#{t('schedule.next', locale: active_ui_locale)} <i class='fa fa-spinner fa-fw fa-spin'></i>"
            } if !object.try(:schedule_object)&.terminating? || (next_occurrences.present? && next_occurrences&.exclude?(object.try(:schedule_object)&.last) && object.try(:schedule_object)&.last > Time.zone.now) %>
    </span>

  <% end %>

<% end %>
