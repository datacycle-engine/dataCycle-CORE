<% classification_alias ||= classification_tree.sub_classification_alias %>

<%= form_with(model: classification_alias, url: classifications_path, namespace: classification_alias&.id, local: true, class: 'classification-alias-form') do |f| %>
  <%= hidden_field(nil, :classification_tree_label_id, value: classification_tree_label.id) %>
  <%= hidden_field(nil, :classification_tree_id, value: classification_tree.id) if classification_tree %>
  <%= f.hidden_field :id %>
  <% active_locale = I18n.locale %>

  <div class="ca-buttons">
    <div class="has-dropdown">
      <a class="button-prime small" data-toggle="locales-menu-<%= classification_alias&.id %>-<%= classification_tree_label&.id %>"><i class="fa fa-language" aria-hidden="true"></i></a>
      <div class="dropdown-pane no-bullet bottom" id="locales-menu-<%= classification_alias&.id %>-<%= classification_tree_label&.id %>" data-dropdown>
        <h5><%= t('common.choose_language', locale: active_ui_locale) %></h5>
        <ul class="list-items">
          <% available_locales_with_names.each do |locale| %>
            <li>
              <%= link_to locale.last, nil, data: { locale: locale.first }, class: "ca-translation-link #{'active' if locale.first == active_locale}" %>
              <%= tag.span(tag.i(class: 'fa fa-language ca-language-icon', aria_hidden: true), class: 'buttons') if classification_alias&.translated_locales&.include?(locale.first) %>
            </li>
          <% end %>
        </ul>
      </div>
    </div>

    <%= tag.button(tag.i(class: 'fa fa-check'), class: 'button-prime small success update submit-button', data: { disable_with: tag.i(class: 'fa fa-spinner fa-spin fa-fw', data: { dc_tooltip: t('data_cycle_core.classifications_adminitration.classification.submit_loading_message', locale: active_ui_locale) }) }) %>
    <button class="button-prime small discard secondary" type="reset"><i aria-hidden="true" class="fa fa-times"></i></button>
  </div>

  <div class="ca-input">
    <%= f.label :internal_name, DataCycleCore::ClassificationAlias.human_attribute_name(:internal_name, locale: active_ui_locale), class: 'ca-label' %>
    <%= f.text_field :internal_name, class: 'ca-input-field', readonly: true, placeholder: t('common.generated_value_placeholder', locale: active_ui_locale), data: { dc_tooltip: classification_alias.full_path } %>
  </div>

  <div class="ca-input translated">
    <% I18n.available_locales.each do |locale| %>
      <% if locale == active_locale %>
        <div class="translated-fields <%= locale %> <%= 'active' if locale == active_locale %>" id="translated-field-<%= locale %>-<%= classification_alias&.id %>-<%= classification_tree_label&.id %>">
          <%= render 'data_cycle_core/classifications/translated_form_fields', locale: locale, classification_alias: classification_alias %>
        </div>
      <% else %>
        <div class="translated-fields remote-render <%= locale %> <%= 'active' if locale == active_locale %>"
          id="translated-field-<%= locale %>-<%= classification_alias&.id %>-<%= classification_tree_label&.id %>"
          data-remote-path="data_cycle_core/classifications/translated_form_fields"
          data-remote-options="<%= to_query_params(classification_alias: classification_alias, locale: locale).to_json %>">
        </div>
      <% end %>
    <% end %>
  </div>

  <div class="ca-input">
    <%= f.label :uri, DataCycleCore::ClassificationAlias.human_attribute_name(:uri, locale: active_ui_locale), class: 'ca-label' %>
    <%= f.text_field :uri, class: 'ca-input-field', readonly: classification_alias&.persisted? ? !can?(:update, classification_alias) : !can?(:create, DataCycleCore::ClassificationAlias), placeholder: t('common.generated_value_placeholder', locale: active_ui_locale) %>
  </div>

  <div class="ca-input color-picker-container <%= 'no-color' unless classification_alias&.color? %>">
    <%= label_tag "classification_alias[ui_configs][color]", DataCycleCore::ClassificationAlias.human_attribute_name("ui_configs/color", locale: active_ui_locale), class: 'ca-label' %>
    <%= text_field_tag "classification_alias[ui_configs][color]", classification_alias&.color, class: 'ca-input-field dc-color-picker', disabled: !can?(:set_color, classification_alias) %>
  </div>

  <% if current_user&.is_role?('super_admin') %>
    <div class="ca-input checkbox">
      <span class="dc-checkbox">
        <%= f.check_box :internal %>
        <%= f.label :internal %>
      </span>
    </div>
  <% end %>

  <div class="ca-input checkbox">
    <span class="dc-checkbox">
      <%= f.check_box :assignable, disabled: classification_alias&.persisted? ? !can?(:update, classification_alias) : !can?(:create, DataCycleCore::ClassificationAlias) %>
      <%= f.label :assignable %>
    </span>
  </div>

  <% if classification_alias.persisted? && can?(:map_classifications, classification_alias) %>
    <% locked = Delayed::Job.where(delayed_reference_type: 'data_cycle_core_classification_alias_update_mappings', delayed_reference_id: classification_alias.id).exists? %>
    <%= hidden_field_tag 'classification_alias[classification_ids][]', classification_alias&.primary_classification_id,
                         class: 'default_classification_mapping' unless locked %>
    <div class="v-select classification-ids-field">
      <%= f.label :classification_ids do |l| %>
        <%= l.translation %>
        <%= tag.i(
          class: 'fa fa-exclamation-triangle warning-color classification-mappings-queued',
          data: {
            dc_tooltip: I18n.t('controllers.success.classification_mappings_queued', locale: active_ui_locale)
          }
        ) if locked %>
      <% end %>
      <%= f.select(:classification_ids,
        async_classification_select_options(classification_alias.additional_classifications.includes(primary_classification_alias: :classification_alias_path), DataCycleCore::Classification),
        {},
        {
          class: 'async-select',
          multiple: true,
          disabled: locked,
          data: {
            placeholder: '',
            search_path: search_classifications_path,
            show_tree_label: true,
            close_on_select: false,
            query_params: {
              exclude: classification_alias.id,
              exclude_tree_label: classification_alias.classification_tree_label.id
            }
          }
        }) %>
    </div>
  <% end %>

  <% if can?(:view_all, classification_alias) %>
    <div class="ca-input">
      <%= f.label :external_keys, class: 'ca-label'%>
      <%= f.text_field :external_keys, class: 'ca-input-field', readonly: true %>
    </div>

    <%# to show classifications mapped to this ClassificationAlias %>
    <div class="v-select">
      <%= f.label :mapped_to %>
      <%= f.select(:mapped_to,
        async_classification_select_options(classification_alias.mapped_to),
        {},
        {
          class: 'async-select',
          multiple: true,
          disabled: true,
          data: {
            placeholder: '',
            search_path: search_classifications_path,
            show_tree_label: true,
            close_on_select: false,
            query_params: {
              exclude: classification_alias.id,
            }
          }
        }) %>
    </div>
  <% end %>
  <%= f.submit class: 'success button' %>
<% end %>
