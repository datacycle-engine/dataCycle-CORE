# frozen_string_literal: true

default_options = {
  header_type: :full
}

options = default_options.merge(defined?(options) ? options || {} : {})

json = {}

if options[:header_type] != :overlay && options[:header_type] != :embedded_to_linked
  json.merge! render('content_context', content:)
  json['@id'] = send("api_v#{@api_version}_#{content.model_name.element.tableize.singularize}_url", @api_subversion, content, @language != I18n.available_locales.first.to_s ? { language: @language } : {})
  json['identifier'] = content.id
  json['url'] = send("#{content.model_name.element.tableize.singularize}_url", content, @language != I18n.available_locales.first.to_s ? { locale: @language } : {})
end

if options[:header_type] == :embedded_to_linked
  json.merge! render('content_context', content:)
  json['identifier'] = content.try(:identifier) || content.id
end

if options[:header_type] == :full
  json['dateCreated'] = content.created_at
  json['dateModified'] = content.updated_at

  json['datePublished'] = content.validity_period.valid_from.to_date.iso8601 unless content.try(:validity_period).try(:valid_from).nil?
  json['expires'] = content.validity_period.valid_until.to_date.iso8601 unless content.try(:validity_period).try(:valid_until).nil?

  if @mode_parameters.include?('compact')
    classifications = content.classifications.includes(:classification_aliases).map(&:classification_aliases).flatten.uniq
  elsif content.respond_to?('data_type')
    classifications = content.send('data_type')&.includes(:classification_aliases)&.map(&:classification_aliases)&.flatten&.uniq
  end

  json.merge! render 'classifications', classification_aliases: classifications, key: 'classifications'
end

json
