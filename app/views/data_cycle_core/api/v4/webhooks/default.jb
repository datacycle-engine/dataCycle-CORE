# frozen_string_literal: true

json = {}
json['@id'] = @content.id

if @content.is_a?(DataCycleCore::Thing)
  json.merge!(render('context', languages: @language))

  cache_key = api_v4_cache_key(@content, @language, @include_parameters, @fields_parameters, @api_subversion, nil, @linked_stored_filter&.id, @classification_trees_parameters)

  graph = Rails.cache.fetch(cache_key, expires_in: 1.year + Random.rand(7.days)) do
    I18n.with_locale(@content.first_available_locale(@language)) do
      render('content_details', content: @content, options: { languages: @language })
    end
  end

  raise DataCycleCore::Error::ApiCacheReadError.new({ cache_key:, cache_content: graph }) unless graph.is_a?(Hash) && graph['@id'] == @content.id

  json.merge!(graph)
end

json['token'] = @token if @token.present?
json['webhookSource'] = @content.webhook_source if @content.webhook_source.present?
json['externalKeys'] = @content.webhook_data.external_keys if @content.webhook_data&.external_keys.present?
json['originalId'] = @content.original_id if @content.original_id.present?
json['originalExternalKeys'] = @content.webhook_data.original_external_keys if @content.webhook_data&.original_external_keys.present?

json
