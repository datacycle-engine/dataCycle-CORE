# frozen_string_literal: true

default_options = {
  include: @include_parameters,
  fields: @fields_parameters,
  field_filter: @field_filter,
  languages: @language,
  full: true
}
options = default_options.merge(defined?(options) ? options || {} : {})
options[:languages] = Array(I18n.locale.to_s) if options[:languages].blank?

json ||= {}

if @classification_tree_label.present?
  json.merge! render 'context', languages: options[:languages]

  if @classification_id.present?
    unless @permitted_params.dig(:section, :'@graph')&.to_i&.zero?
      json['@graph'] = []
      json['@graph'] << Rails.cache.fetch(api_v4_cache_key(@classification_aliases.first, options[:languages], options[:include], options[:fields], @api_subversion, options[:full]), expires_in: 1.year + Random.rand(7.days)) do
        I18n.with_locale(@classification_aliases.first.first_available_locale(options[:languages])) do
          render 'classification', content: @classification_aliases.first, options: options.dup
        end
      end
    end
  else
    queue = DataCycleCore::WorkerPool.new(@permitted_params.dig(:section, :meta)&.to_i&.zero? ? 1 : DataCycleCore::ApiService.allowed_thread_count)
    queue.append do
      json.merge! render 'classifications', classification_aliases: @classification_aliases, key: '@graph', options: options, show_all_concepts: true
    end

    queue.append do
      @classification_aliases.instance_variable_set(:@total_count, @classification_aliases.except(:select, :joins, :order, :group, :limit, :offset).count)

      json.merge! render 'pagination_links',
                         objects: @classification_aliases,
                         object_url: ->(params) { api_v4_facets_url(@api_subversion, params.merge(classification_id: @classification_id)) }
    end

    queue.wait!
  end

  aliases = @classification_aliases.index_by(&:id)
  json['@graph'].each do |c|
    c['dc:thingCountWithSubtree'] = aliases[c['@id']].thing_count_with_subtree
    c['dc:thingCountWithoutSubtree'] = aliases[c['@id']].thing_count_without_subtree
  end
end

json
