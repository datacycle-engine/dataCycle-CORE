# frozen_string_literal: true

def serialize_schedule(schedule, filter, fields, include = [])
  data = { '@id' => schedule.id, '@type' => 'Schedule' }.merge(schedule&.to_schedule_schema_org)&.compact
  data.merge!(schedule&.to_ical_string_api_v4 || {}) if select_attributes(include).include?('dc:ical')

  filter ? data&.select { |key, _value| api_default_attributes.include?(key) || select_attributes(fields).include?(key) || select_attributes(include).include?(key) } : data
end

options ||= {}
json ||= {}

if content.present?
  key_name = attribute_key(key, definition)
  new_fields = subtree_for(key_name, options[:fields])
  new_include = subtree_for(key_name, options[:include])
  json[key_name] = content.send(:"#{key}_overlay")&.map do |schedule|
    if options[:field_filter] && new_fields.present?
      serialize_schedule(schedule, options[:field_filter], new_fields, new_include)
    elsif included_attribute?(key_name, options[:include])
      serialize_schedule(schedule, false, new_fields, new_include)
    else
      serialize_schedule(schedule, true, new_fields, new_include)
    end
  end
elsif id.present? # for universal endpoint
  schedule = DataCycleCore::Schedule.find(id)
  new_fields = options[:fields] || []
  json.merge!(serialize_schedule(schedule, options[:field_filter], new_fields))
end

json
