# frozen_string_literal: true

json = {}
unless @permitted_params.dig(:section, :meta)&.to_i&.zero?
  if @permitted_params.dig(:page, :limit)&.to_i&.positive?
    json['meta'] = {
      total: objects.limit(nil).offset(nil).count
    }
  else
    json['meta'] = {
      total: objects.total_count,
      pages: objects.total_pages
    }
  end

  if (endpoint = @watch_list || @stored_filter)
    json['meta']['collection'] = {
      id: endpoint.id,
      name: endpoint.name,
      slug: endpoint.slug,
      path: endpoint.try(:path)
    }.compact_blank
  end
end

if request.request_method == 'POST'
  common_params = {}
else
  common_params = @permitted_params.to_h.except('id', 'format', 'page', 'api_subversion')
end

common_params = common_params.merge(page: { offset: @permitted_params.dig(:page, :offset).to_i }) if @permitted_params.dig(:page, :offset)&.to_i&.positive?

unless @permitted_params.dig(:section, :links)&.to_i&.zero? || @permitted_params.dig(:page, :limit)&.to_i&.positive?
  json['links'] = {}
  json['links']['prev'] = object_url.call(common_params.deep_merge(page: { number: objects.prev_page, size: objects.limit_value })) if objects.prev_page
  json['links']['next'] = object_url.call(common_params.deep_merge(page: { number: objects.next_page, size: objects.limit_value })) if objects.next_page
end
json
