# frozen_string_literal: true

def external_identifier(content)
  return {} if content.external_source.blank?
  {
    'identifier' => [
      {
        '@type' => 'PropertyValue',
        'propertyID' => content.external_source&.identifier,
        'value' => content.primary_classification&.external_key
      }
    ]
  }
end

def render_classification(attribute, partial, content, options)
  Rails.cache.fetch(api_v4_cache_key(content, options[:languages], options[:include], options[:fields], @api_subversion, nil), expires_in: 1.year + Random.rand(7.days)) do
    I18n.with_locale(content.first_available_locale(options[:languages])) do
      render(partial, content:, options: options, key: attribute)
    end
  end
end

def render_pref_label(content, languages, one)
  return unless languages.size.positive?
  return_data = nil
  if one
    return_data = content.name || content.internal_name
  else
    value_container = []
    languages.each do |language|
      I18n.with_locale(language) do
        next if content.name.blank?
        value_container << { '@language' => language, '@value' => content.name }
      end
    end
    return_data = value_container.presence || [{ '@language' => I18n.default_locale, '@value' => content.internal_name }]
  end
  return_data.presence
end

def render_description(content, languages, one)
  return unless languages.size.positive?
  return_data = nil
  if one
    return_data = content.description
  else
    value_container = []
    languages.each do |language|
      I18n.with_locale(language) do
        next if content.description.blank?
        value_container << { '@language' => language, '@value' => content.description }
      end
    end
    # return_data = value_container
    return_data = value_container.presence || (content.description.present? ? [{ '@language' => I18n.default_locale, '@value' => content.description }] : nil)
  end
  return_data.presence
end

uri = classifications_api_v4_concept_scheme_url(content.classification_tree_label.id, classification_id: content.id, api_subversion: @subversion, language: serialize_language(options[:languages]))
render_present_language_only = @language.size == 1 && options[:languages] == [I18n.locale.to_s]

ancestors = content.ancestors.to_a
scheme = ancestors.last
concept_ancestors = ancestors[0..-2]

json = {
  '@id' => content.id,
  '@type' => 'skos:Concept'
}.compact

attributes = {
  'dc:multilingual' => -> { true },
  'dc:translation' => -> { content.available_locales },
  'dc:entityUrl' => -> { uri },
  'skos:prefLabel' => -> { render_pref_label(content, options[:languages], render_present_language_only) },
  'dct:description' => -> { render_description(content, options[:languages], render_present_language_only) },
  'url' => -> { content.uri },
  'skos:inScheme' => -> { render_classification('skos:inScheme', 'classification_tree', scheme, build_new_options_object('skos:inScheme', options)) },
  'skos:topConceptOf' => -> { concept_ancestors.size.positive? ? nil : render_classification('skos:topConceptOf', 'classification_tree', scheme, build_new_options_object('skos:topConceptOf', options)) },
  'skos:broader' => -> { concept_ancestors.size.positive? ? render_classification('skos:broader', 'classification', concept_ancestors&.first, build_new_options_object('skos:broader', options)) : nil },
  'skos:ancestors' => -> { concept_ancestors&.map { |concept_ancestor| render_classification('skos:ancestors', 'classification', concept_ancestor, build_new_options_object('skos:ancestors', options)) }.presence },
  'dct:created' => -> { content.created_at },
  'dct:modified' => -> { content.updated_at },
  'dct:deleted' => -> { content.deleted_at }
}

attributes.each do |attribute, operation|
  json[attribute] = operation.call if options[:field_filter] == false || attribute_visible?(attribute, options)
end

json.merge!(external_identifier(content)) if attribute_visible?('identifier', options)

include_fields = options[:include] + options[:fields]
json['dc:color'] = content.color if included_attribute_not_full?('dc:color', include_fields) && content.color?
json['dc:icon'] = content.icon if included_attribute_not_full?('dc:icon', include_fields) && content.icon?

if included_attribute_not_full?('geo', include_fields) &&
   (geom = geoshape_as_json(content.classification_polygons&.first&.geom)).present?
  json['geo'] = {
    '@id' => generate_uuid(content.id, 'geo'),
    '@type' => 'GeoShape',
    **geom
  }
end

json.compact
