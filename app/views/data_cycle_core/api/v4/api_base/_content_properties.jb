# frozen_string_literal: true

json ||= {}

unless content.schema.nil?
  ordered_api_properties(validation: content.schema).each do |key, prop|
    api_property_definition = api_definition(prop)
    next if prop['type'] == 'classification' && api_property_definition['partial'].blank?
    next if options[:hidden_attributes].include?(key)
    next if options[:combined_attributes].include?(key)

    property_name = api_property_definition.dig('transformation', 'name')

    if options[:field_filter].present?
      is_valid_key = false
      is_valid_key = true if ['nest', 'merge_object'].include?(api_property_definition.dig('transformation', 'method')) && property_name.present? && attribute_visible?(property_name, options)

      validation_keys = [attribute_key(key, prop)]
      validation_keys += options.dig(:transformation_mapping, key) if options.dig(:transformation_mapping, key).present?
      validation_keys += [api_property_definition.dig('transformation', 'name')] if api_property_definition.dig('transformation', 'method') == 'append'

      is_valid_key = true if validation_keys.any? { |k| attribute_visible?(k, options) }

      next unless is_valid_key
    end

    value = nil
    value_blank = false

    if prop['type'] == 'embedded' && prop['translated']
      value = load_embedded_object(content, key, options[:languages], prop)
      value_blank = DataCycleCore::DataHashService.blank?(value)
    else
      value = I18n.with_locale(content.first_available_locale) { content.try("#{key}_overlay") }
      value_blank = DataCycleCore::DataHashService.blank?(load_value_object(content, key, value, options[:languages], api_definition(prop), options[:expand_language]))
    end

    next if value_blank

    partial_params = render_api_attribute(key:, definition: prop, value:, parameters: { options: }, content:)
    if ['nest', 'merge_object'].include?(api_property_definition.dig('transformation', 'method')) && property_name.present?
      if json[property_name].present?
        json[property_name].merge! render(*partial_params) unless partial_params.nil?
      else
        json[property_name] = render(*partial_params) unless partial_params.nil?
      end

      json[property_name]['@id'] = generate_uuid(content.id, property_name) if json.dig(property_name, '@id').blank?
      json[property_name]['@type'] = api_property_definition.dig('transformation', 'type') if api_property_definition.dig('transformation', 'type').present?

      # filter out fields
      new_fields = subtree_for(property_name, options[:fields])
      new_include = subtree_for(property_name, options[:include])
      if new_fields.present? && options[:field_filter]
        json[property_name] = json[property_name].select do |p_key, _value|
          api_default_attributes.include?(p_key) || select_attributes(new_fields).include?(p_key) || select_attributes(new_include).include?(p_key)
        end
      end

    elsif api_property_definition.dig('transformation', 'method') == 'append'
      # TODO: add more types for append transformation
      next unless ['embedded', 'linked', 'string', 'number'].include?(prop['type'])
      json[property_name] ||= []
      if ['embedded', 'linked'].include?(prop['type'])
        json[property_name] += (render(*partial_params)&.dig(property_name) || [])&.reject(&:blank?) unless partial_params.nil?
      else
        json[property_name] += ([render(*partial_params)] || [])&.reject(&:blank?) unless partial_params.nil?
      end
      json.delete(property_name) if json[property_name].blank?
    else
      json.merge! render(*partial_params) unless partial_params.nil?
    end
  end

end
json
